---
import Image from "~/components/common/Image.astro";
import hero from "~/assets/images/hero.jpg";
import Button from "~/components/ui/Button.astro";

import type { Hero as Props } from "~/types";

const {
    title = await Astro.slots.render("title"),
    subtitle = await Astro.slots.render("subtitle"),
    tagline,

    content = await Astro.slots.render("content"),
    actions = await Astro.slots.render("actions"),
    image = await Astro.slots.render("image"),

    id,
    bg = await Astro.slots.render("bg"),
} = Astro.props;
---

<section
    style=`background-image: url(${hero.src});`
    class="relative md:-mt-[120px] not-prose overflow-hidden bg-cover bg-center"
    {...id ? { id } : {}}
>
    <div class="absolute inset-0 bg-black opacity-30 z-0 pointer-events-none"></div>
    <!-- <Image
        src={hero}
        loading={'eager'}
        alt={'hero image'}
        class={'absolute -z-10 object-cover bg-cover object-center'}
    /> -->
    <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
        <slot name="bg">
            {bg ? <Fragment set:html={bg} /> : null}
        </slot>
    </div>
    <div class="relative px-4 sm:px-6 w-full backdrop-blur-sm">
        <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
        <div class="py-12 md:py-20">
            <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
                {
                    tagline && (
                        <p
                            class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
                            set:html={tagline}
                        />
                    )
                }
                {
                    title && (
                        <h1
                            class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-gray-200/80"
                            set:html={title}
                        />
                    )
                }
                <div class="max-w-3xl mx-auto">
                    {subtitle && <p class="text-xl  mb-6 text-white " set:html={subtitle} />}
                    {
                        actions && (
                            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                                {Array.isArray(actions) ? (
                                    actions.map((action) => (
                                        <div class="flex w-full sm:w-auto">
                                            <Button {...(action || {})} class="w-full sm:mb-0" />
                                        </div>
                                    ))
                                ) : (
                                    <Fragment set:html={actions} />
                                )}
                            </div>
                        )
                    }
                </div>
                {content && <Fragment set:html={content} />}
            </div>
            <div>
                <!-- {
                    image && (
                        <div class="relative m-auto max-w-5xl">
                            {typeof image === 'string' ? (
                                <Fragment set:html={image} />
                            ) : (
                                <Image
                                    class="mx-auto rounded-md w-full"
                                    widths={[400, 768, 1024, 2040]}
                                    sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                                    loading="eager"
                                    width={1024}
                                    height={576}
                                    {...image}
                                />
                            )}
                        </div>
                    )
                } -->
            </div>
        </div>
    </div>
</section>
